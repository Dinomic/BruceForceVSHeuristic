#include <iostream>
#include <vector>
#include <map>
using namespace std;
int Find_max_position( vector<int> Arr );
void Eleminate_one_ele( vector<int>& Arr, int i );
int main()
{
	ios_base :: sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);
	int n_Task;
	int n_Mach;
	cin >> n_Task;
	cin >> n_Mach;
	vector<int> Task_Data (n_Task,0);
	vector<int> Mach_Arr (n_Task,-1);
	map<int,int> Mach_Data;
    for( auto& ele : Task_Data )
		cin >> ele;
	for( int i = 0; i < n_Mach; i ++ )
	{
		Mach_Data[i] = 0;
	}
	for( int i = 0; i < n_Task; i ++ )
	{
		int max_ele = Find_max_position(Task_Data);
		map<int,int> ::iterator it1;
		int min_Time = 0;
		it1 = Mach_Data.begin();
		min_Time = it1->second;
		int min_Mach = 0;
		for( int j = 1; j < n_Mach; j ++ )
		{
			it1 = Mach_Data.find(j);
			if( min_Time > it1->second)
			{
				min_Time = it1->second;
				min_Mach = it1->first;
			}
		}
		Mach_Data[min_Mach] += Task_Data[max_ele];
		Mach_Arr[max_ele] = min_Mach;
		Eleminate_one_ele(Task_Data,max_ele);
	}
	for( int i = 0; i < n_Task; i ++ )
		cout << Mach_Arr[i] << " ";
	return 0;
}

int Find_max_position( vector<int> Arr )
{
	int max_val = 0;
	int max_ele = 0;
	for( int i = 0; i < Arr.size(); i ++ )
		if( max_val < Arr[i] )
		{
			max_val = Arr[i];
			max_ele = i;
		}
	return max_ele;
}

void Eleminate_one_ele( vector<int>& Arr, int i )
{
	Arr[i] = -1;
}
































